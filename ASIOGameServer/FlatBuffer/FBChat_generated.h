// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBCHAT_FBCHAT_H_
#define FLATBUFFERS_GENERATED_FBCHAT_FBCHAT_H_

#include "flatbuffers/flatbuffers.h"

namespace FBChat {

struct Chat;

enum Color {
  Color_BLACK = 0,
  Color_RED = 1,
  Color_YELLOW = 2,
  Color_BLUE = 3,
  Color_MIN = Color_BLACK,
  Color_MAX = Color_BLUE
};

inline const Color (&EnumValuesColor())[4] {
  static const Color values[] = {
    Color_BLACK,
    Color_RED,
    Color_YELLOW,
    Color_BLUE
  };
  return values;
}

inline const char * const *EnumNamesColor() {
  static const char * const names[] = {
    "BLACK",
    "RED",
    "YELLOW",
    "BLUE",
    nullptr
  };
  return names;
}

inline const char *EnumNameColor(Color e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesColor()[index];
}

struct Chat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NICK = 4,
    VT_MESSAGE = 6,
    VT_COLOR = 8
  };
  const flatbuffers::String *nick() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  Color color() const {
    return static_cast<Color>(GetField<int8_t>(VT_COLOR, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NICK) &&
           verifier.Verify(nick()) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.Verify(message()) &&
           VerifyField<int8_t>(verifier, VT_COLOR) &&
           verifier.EndTable();
  }
};

struct ChatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nick(flatbuffers::Offset<flatbuffers::String> nick) {
    fbb_.AddOffset(Chat::VT_NICK, nick);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(Chat::VT_MESSAGE, message);
  }
  void add_color(Color color) {
    fbb_.AddElement<int8_t>(Chat::VT_COLOR, static_cast<int8_t>(color), 0);
  }
  explicit ChatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChatBuilder &operator=(const ChatBuilder &);
  flatbuffers::Offset<Chat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Chat>(end);
    return o;
  }
};

inline flatbuffers::Offset<Chat> CreateChat(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> nick = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0,
    Color color = Color_BLACK) {
  ChatBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_nick(nick);
  builder_.add_color(color);
  return builder_.Finish();
}

inline flatbuffers::Offset<Chat> CreateChatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *nick = nullptr,
    const char *message = nullptr,
    Color color = Color_BLACK) {
  return FBChat::CreateChat(
      _fbb,
      nick ? _fbb.CreateString(nick) : 0,
      message ? _fbb.CreateString(message) : 0,
      color);
}

inline const FBChat::Chat *GetChat(const void *buf) {
  return flatbuffers::GetRoot<FBChat::Chat>(buf);
}

inline const FBChat::Chat *GetSizePrefixedChat(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FBChat::Chat>(buf);
}

inline bool VerifyChatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FBChat::Chat>(nullptr);
}

inline bool VerifySizePrefixedChatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FBChat::Chat>(nullptr);
}

inline void FinishChatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBChat::Chat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedChatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FBChat::Chat> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FBChat

#endif  // FLATBUFFERS_GENERATED_FBCHAT_FBCHAT_H_
